name: Run Python tests

on:
  push:
    branches:
      - dev

permissions:
  contents: write

env:
  MYSQL_ROOT_PASSWORD: "root_password"
  MYSQL_DATABASE: "my_test_db"

jobs:
  build:
    name: Run tests
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest] # os: [ubuntu-latest, windows-latest]
        python-version: ["3.9"] # python-version: ["3.9", "3.10"]

    steps:
      - uses: szenius/set-timezone@v1.2
        with:
          timezoneLinux: "America/New_York"
      - uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -U pytest
          pip install -e .
          pip install webdriver-manager  # Install webdriver-manager to handle the ChromeDriver
      - name: Run Pytest
        run: python -m pytest --ignore=./tests
      - name: Install Chromium and ChromeDriver
        run: |
          sudo apt-get update
          sudo apt-get install -y chromium-browser chromium-chromedriver
      - name: Create Docker Network
        run: |
          docker network create my-network
      - name: Start MySQL Container
        run: |
          docker run --name mysql-container \
          --network my-network \
          -e MYSQL_ROOT_PASSWORD=root_password \
          -e MYSQL_DATABASE=my_test_db \
          -e MYSQL_USER=user \
          -e MYSQL_PASSWORD=password \
          -v $(pwd)/dump.sql:/docker-entrypoint-initdb.d/dump.sql \
          -d mysql:8.0
      - name: Wait for MySQL to be ready
        run: |
          sleep 10
      - name: Check MySQL container logs
        run: |
          docker logs mysql-container
      - name: Verify dump.sql
        run: |
          docker exec -i mysql-container mysql -u root -proot_password -h 127.0.0.1 -e "SELECT * FROM users LIMIT 1;" my_test_db

      - name: Run the Frontend
        run: |
          cd ./frontend
          yarn install  # Ensure all dependencies are installed
          chmod +x ./node_modules/.bin/react-scripts
          yarn start &
          cd ../

      - name: Build and start backend container
        run: |
          docker build -t flask-backend .
          docker run --name backend-container --network my-network -p 5000:5000 -d flask-backend
          cd ../
      - name: Wait for services to start
        run: sleep 30

      - name: Docker logs
        run: |
          docker logs mysql-container
          docker logs backend-container

      - name: Run Selenium Tests
        env:
          PYTHONPATH: ${{ github.workspace }}
        run: |
          curl -X POST http://localhost:5000/endpointOne -d '{}' -H "Content-Type: application/json"
          curl http://localhost:5000/endpointTwo
          cd ./tests
          python test_login.py
          python test_registerpatient.py
          python test_registertherapist.py
          python test_dailysurveys.py
          python test_graphs.py
          python test_journal.py
          python test_payment.py
          python test_testimonial.py
          
          # python test_acceptingpatients.py
          # python test_therapistsurveys.py

      - name: Push changes to main branch
        if: github.ref == 'refs/heads/dev' && success()
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git fetch --all
          git checkout main
          git merge dev -X theirs --allow-unrelated-histories  # Resolve conflicts automatically in favor of dev
          git push https://github.com/${{ github.repository }}.git HEAD:main  # Push to the 'main' branch using GITHUB_TOKEN
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Use the automatically created GITHUB_TOKEN for authentication
